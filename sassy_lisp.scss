////////////////////
// List Functions //
////////////////////

@function car($list) {
  @return nth($list, 1);
}

@function cdr($list) {
  $output: ();
  $length: length($list);

  @if $length > 1 {
    @for $index from 2 through $length {
      $output: append($output, nth($list, $index));
    }
  }

  @return $output;
}

////////////////////
// Math Functions //
////////////////////

@function add($result, $operands...) {
  @each $number in $operands {
    $result: $result + $number;
  }

  @return $result;
}

@function subtract($result, $operands...) {
  @each $number in $operands {
    $result: $result - $number;
  }

  @return $result;
}

@function multiply($result, $operands...) {
  @each $number in $operands {
    $result: $result * $number;
  }

  @return $result;
}

@function divide($result, $operands...) {
  @each $number in $operands {
    $result: $result / $number;
  }

  @return $result;
}

///////////////////////
// Boolean Functions //
///////////////////////

@function bool_and($result, $operands...) {
  @each $number in $operands {
    $result: $result and $number;
  }

  @return $result;
}

@function bool_or($result, $operands...) {
  @each $number in $operands {
    $result: $result or $number;
  }

  @return $result;
}

@function bool_not($value) {
  @return not $value;
}

/////////////////
// Evalualtion //
/////////////////

@function function_eval($list...) {
  @return map_get(eval($list, (), ()), result);
}

@function eval($list, $globals, $locals) {
  $result: ();

  @if $list != () {
    $car: car($list);
    $cdr: cdr($list);

    // Evaluate each item in the list
    @if type_of($car) == list {
      $sub_result: list_eval($list, $globals, $locals);

      $globals: map_merge($globals, map_get($sub_result, globals));
      $locals:  map_merge($locals,  map_get($sub_result, locals));

      $result: nth(map_get($sub_result, result), -1);

    // Evaluate q built-in
    } @else if $car == q {
      $result: $cdr;

    // Define a global
    } @else if $car == global {
      $name:  nth($cdr, 1);
      $value: nth($cdr, 2);

      $globals: map_merge($globals, ( $name: $value ));
      $result: $name;

    // Evaluate as a function
    } @else {
      $sub_result: list_eval($cdr, $globals, $locals);

      $globals: map_merge($globals, map_get($sub_result, globals));
      $locals:  map_merge($locals,  map_get($sub_result, locals));

      $result: call($car, map_get($sub_result, result)...);
    }
  }

  @return ( result: $result, globals: $globals, locals: $locals );
}

@function list_eval($list, $globals, $locals) {
  $result: ();

  @each $item in $list {
    @if type_of($item) == list {
      $sub_result: eval($item, $globals, $locals);

      $globals: map_merge($globals, map_get($sub_result, globals));
      $locals:  map_merge($locals,  map_get($sub_result, locals));

      $item: map_get($sub_result, result);

    } @else if map_has_key($globals, $item) {
      $item: map_get($globals, $item);

    } @else if map_has_key($locals, $item) {
      $item: map_get($locals, $item);
    }

    $result: append($result, $item);
  }

  @return ( result: $result, globals: $globals, locals: $locals );
}
