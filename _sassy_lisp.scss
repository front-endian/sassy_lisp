////////////////////
// List Functions //
////////////////////

@function car($list) {
  @return nth($list, 1);
}

@function cdr($list) {
  $output: ();
  $length: length($list);

  @if $length > 1 {
    @for $index from 2 through $length {
      $output: append($output, nth($list, $index));
    }
  }

  @return $output;
}

////////////////////
// Math Functions //
////////////////////

@function add($value, $rest...) {
  @each $number in $rest {
    $value: $value + $number;
  }

  @return $value;
}

@function subtract($value, $rest...) {
  @each $number in $rest {
    $value: $value - $number;
  }

  @return $value;
}

@function multiply($value, $rest...) {
  @each $number in $rest {
    $value: $value * $number;
  }

  @return $value;
}

@function divide($value, $rest...) {
  @each $number in $rest {
    $value: $value / $number;
  }

  @return $value;
}

///////////////////////
// Boolean Functions //
///////////////////////

@function bool_and($value, $rest...) {
  @each $item in $rest {
    $value: $value and $item;
  }

  @return $value;
}

@function bool_or($value, $rest...) {
  @each $item in $rest {
    $value: $value or $item;
  }

  @return $value;
}

@function bool_not($value) {
  @return not $value;
}

/////////////////
// Evalualtion //
/////////////////

@function function_eval($list...) {
  @return map_get(eval($list, (), ()), result);
}

@function eval($list, $globals, $locals) {
  $result: ();

  @if $list != () {
    $car: car($list);
    $cdr: cdr($list);

    // Evaluate each item in the list
    @if type_of($car) == list {
      $sub_result: list_eval($list, $globals, $locals);

      $globals: map_merge($globals, map_get($sub_result, globals));
      $locals:  map_merge($locals,  map_get($sub_result, locals));

      $result: nth(map_get($sub_result, result), -1);

    // Evaluate q built-in
    } @else if $car == q {
      $result: $cdr;

    // Define a global
    } @else if $car == global {
      $name:  nth($cdr, 1);
      $value: nth($cdr, 2);

      $globals: map_merge($globals, ( $name: $value ));
      $result: $name;

    // Evaluate as a function
    } @else {
      $sub_result: list_eval($cdr, $globals, $locals);

      $globals: map_merge($globals, map_get($sub_result, globals));
      $locals:  map_merge($locals,  map_get($sub_result, locals));

      // Call lambda defined globally or locally
      @if map_has_key($globals, $car) or map_has_key($locals, $car) {
        $definition: map_get(
                       if(map_has_key($globals, $car), $globals, $locals),
                       $car
                     );

        $lambda_result: lambda_eval(
                          $definition,
                          $globals,
                          map_get($sub_result, result)...
                        );

        $globals: map_merge($globals, map_get($lambda_result, globals));
        $result:  map_get($lambda_result, result);

      // Call a native SASS function
      } @else {
        $result: call($car, map_get($sub_result, result)...);
      }
    }
  }

  @return ( result: $result, globals: $globals, locals: $locals );
}

@function list_eval($list, $globals, $locals) {
  $result: ();

  @each $item in $list {
    @if type_of($item) == list {
      $sub_result: eval($item, $globals, $locals);

      $globals: map_merge($globals, map_get($sub_result, globals));
      $locals:  map_merge($locals,  map_get($sub_result, locals));

      $item: map_get($sub_result, result);

    } @else if map_has_key($globals, $item) {
      $item: map_get($globals, $item);

    } @else if map_has_key($locals, $item) {
      $item: map_get($locals, $item);
    }

    $result: append($result, $item);
  }

  @return ( result: $result, globals: $globals, locals: $locals );
}

@function lambda_eval($definition, $globals, $arguments...) {
  $parameters: nth($definition, 1);
  $body:       nth($definition, 2);
  $locals:     ();

  @for $index from 1 through length($parameters) {
    $locals: map_merge(
               $locals,
               ( nth($parameters, $index): nth($arguments, $index) )
             );
  }

  @return eval($body, $globals, $locals);
}
