////////////////////
// List Functions //
////////////////////

@function car($list) {
  @return nth($list, 1);
}

@function cdr($list) {
  $output: ();
  $length: length($list);

  @if $length > 1 {
    @for $index from 2 through $length {
      $output: append($output, nth($list, $index));
    }
  }

  @return $output;
}

////////////////////
// Math Functions //
////////////////////

@function add($value, $rest...) {
  @each $number in $rest {
    $value: $value + $number;
  }

  @return $value;
}

@function subtract($value, $rest...) {
  @each $number in $rest {
    $value: $value - $number;
  }

  @return $value;
}

@function multiply($value, $rest...) {
  @each $number in $rest {
    $value: $value * $number;
  }

  @return $value;
}

@function divide($value, $rest...) {
  @each $number in $rest {
    $value: $value / $number;
  }

  @return $value;
}

///////////////////////
// Boolean Functions //
///////////////////////

@function bool_and($value, $rest...) {
  @each $item in $rest {
    $value: $value and $item;
  }

  @return $value;
}

@function bool_or($value, $rest...) {
  @each $item in $rest {
    $value: $value or $item;
  }

  @return $value;
}

@function bool_not($value) {
  @return not $value;
}

@function equal($value, $other) {
  @return $value == $other;
}

@function greater_than($value, $other) {
  @return $value > $other;
}

@function less_than($value, $other) {
  @return $value < $other;
}

@function less_than_or_equal($value, $other) {
  @return $value <= $other;
}

@function greater_than_or_equal($value, $other) {
  @return $value >= $other;
}

/////////////////
// Evalualtion //
/////////////////

@function function_eval($list...) {
  @return map_get(eval($list, (), ()), result);
}

@function eval($list, $globals, $locals) {
  $result: ();

  @if $list != () {
    $car: car($list);
    $cdr: cdr($list);

    // Evaluate each item in the list
    @if type_of($car) == list {
      $sub_state: list_eval($list, $globals, $locals);

      $globals: set_globals($globals, $sub_state);
      $locals:  set_locals($locals,   $sub_state);

      $result: nth(get_result($sub_state), -1);

    // Evaluate q built-in
    } @else if $car == q {
      $sub_state: list_eval($cdr, $globals, $locals);

      $globals: set_globals($globals, $sub_state);
      $locals:  set_locals($locals, $sub_state);

      $result: get_result($sub_state);

    // Evaluate cond built-in
    } @else if $car == cond {
      $sub_state: cond_eval($cdr, $globals, $locals);

      $globals: set_globals($globals, $sub_state);
      $locals:  set_locals($locals, $sub_state);

      $result: get_result($sub_state);

    // Define a global or a local
    } @else if $car == global or $car == local {
      $name:  nth($cdr, 1);
      $value: nth($cdr, 2);

      @if type_of($value) == list {
        $sub_state: eval($value, $globals, $locals);

        $globals: set_globals($globals, $sub_state);
        $locals:  set_locals($locals, $sub_state);

        $value: get_result($sub_state);
      }

      $map: ( $name: $value );

      @if $car == global {
        $globals: map_merge($globals, $map);
      } @else {
        $locals: map_merge($locals, $map);
      }

      $result: $name;

    // Create a lambda
    } @else if $car == lambda {
      $result: make_lambda(nth($cdr, 1), nth($cdr, 2), $locals);

    // Evaluate as a function
    } @else {
      $sub_state: list_eval($cdr, $globals, $locals);

      $globals: set_globals($globals, $sub_state);
      $locals:  set_locals($locals,   $sub_state);

      // Call lambda defined globally or locally
      @if map_has_key($globals, $car) or map_has_key($locals, $car) {
        $lambda: map_get(
                   if(map_has_key($locals, $car), $locals, $globals),
                   $car
                 );

        $lambda_result: lambda_eval($lambda, $globals, get_result($sub_state)...);

        $globals: set_globals($globals, $lambda_result);
        $result:  get_result($lambda_result);

      // Call a native SASS function
      } @else {
        $result: call($car, get_result($sub_state)...);
      }
    }
  }

  @return make_state($result, $globals, $locals);
}

@function list_eval($list, $globals, $locals) {
  $result: ();

  @each $item in $list {
    @if type_of($item) == list {
      $sub_state: eval($item, $globals, $locals);

      $globals: set_globals($globals, $sub_state);
      $locals:  set_locals($locals,   $sub_state);

      $item: get_result($sub_state);

    } @else if map_has_key($locals, $item) {
      $item: map_get($locals, $item);

    } @else if map_has_key($globals, $item) {
      $item: map_get($globals, $item);
    }

    $result: append($result, $item);
  }

  @return make_state($result, $globals, $locals);
}

@function lambda_eval($lambda, $globals, $arguments...) {
  $parameters: get_lambda_parameters($lambda);
  $body:       get_lambda_body($lambda);
  $locals:     get_lambda_locals($lambda);

  @if length($parameters) != 0 {
    @for $index from 1 through length($parameters) {
      $locals: map_merge(
                 $locals,
                 ( nth($parameters, $index): nth($arguments, $index) )
               );
    }
  }

  @return eval($body, $globals, $locals);
}

@function cond_eval($blocks, $globals, $locals) {
  $result: null;

  @each $block in $blocks {
    $car: car($block);
    $cdr: cdr($block);

    // If this is an else block, eval the cdr and return the result
    @if $car == else {
      @return eval($cdr, $globals, $locals);

    // This is a conditional block, so eval the car
    } @else {
      $sub_state: eval($car, $globals, $locals);

      $globals: set_globals($globals, $sub_state);
      $locals:  set_locals($locals,   $sub_state);
      $result:  get_result($sub_state);

      // If the car returned true, eval the cdr and return the result
      @if $result {
        $sub_state: eval($cdr, $globals, $locals);

        $globals: set_globals($globals, $sub_state);
        $locals:  set_locals($locals,   $sub_state);

        @return make_state(get_result($sub_state), $globals, $locals);
      }
    }
  }
}

@function set_globals($to, $from) {
  @return map_merge($to, get_globals($from));
}

@function set_locals($to, $from) {
  @return map_merge($to, get_locals($from));
}

@function get_result($data) {
  @return map_get($data, result);
}

@function get_globals($data) {
  @return map_get($data, globals);
}

@function get_locals($data) {
  @return map_get($data, locals);
}

@function get_lambda_parameters($data) {
  @return nth($data, 1);
}

@function get_lambda_body($data) {
  @return nth($data, 2);
}

@function get_lambda_locals($data) {
  @return nth($data, 3);
}

@function make_state($result, $globals, $locals) {
  @return ( result: $result, globals: $globals, locals: $locals )
}

@function make_lambda($parameters, $body, $locals) {
  @return ($parameters, $body, $locals)
}
