// Copyright (C) 2016 Colin Fulton
// All rights reserved.
//
// This software may be modified and distributed under the
// terms of the three-clause BSD license. See LICENSE.txt

// Board Functions

////////////////////
// List Functions //
////////////////////

@function car($list) {
  @return nth($list, 1);
}

@function cdr($list) {
  $output: ();
  $length: length($list);

  @if $length > 1 {
    @for $index from 2 through $length {
      $output: append($output, nth($list, $index));
    }
  }

  @return $output;
}

////////////////////
// Math Functions //
////////////////////

@function identity($value) {
  @return $value;
}

@function add($value, $rest...) {
  @each $number in $rest {
    $value: $value + $number;
  }

  @return $value;
}

@function subtract($value, $rest...) {
  @each $number in $rest {
    $value: $value - $number;
  }

  @return $value;
}

@function multiply($value, $rest...) {
  @each $number in $rest {
    $value: $value * $number;
  }

  @return $value;
}

@function divide($value, $rest...) {
  @each $number in $rest {
    $value: $value / $number;
  }

  @return $value;
}

///////////////////////
// Boolean Functions //
///////////////////////

@function bool_and($value, $rest...) {
  @each $item in $rest {
    $value: $value and $item;
  }

  @return $value;
}

@function bool_or($value, $rest...) {
  @each $item in $rest {
    $value: $value or $item;
  }

  @return $value;
}

@function bool_not($value) {
  @return not $value;
}

@function equal($value, $other) {
  @return $value == $other;
}

@function greater_than($value, $other) {
  @return $value > $other;
}

@function less_than($value, $other) {
  @return $value < $other;
}

@function less_than_or_equal($value, $other) {
  @return $value <= $other;
}

@function greater_than_or_equal($value, $other) {
  @return $value >= $other;
}

////////////////
// Evaluation //
////////////////

@function function_eval($list...) {
  @return get_result(eval($list, make_state()));
}

@function eval($list, $state) {
  @if $list != () {
    $car: car($list);
    $cdr: cdr($list);

    // Evaluate each item in the list
    @if type_of($car) == list {
      $state: list_eval($list, $state);
      $state: set_result($state, nth(get_result($state), -1));

    // Quote list
    } @else if $car == q {
      $state: list_eval($cdr, $state);

    // Evaluate a conditional
    } @else if $car == cond {
      $state: cond_eval($cdr, $state);

    // Create a lambda
    } @else if $car == lambda {
      $state: set_result_to_lambda($state, $cdr);

    // Set a variable
    } @else if $car == global or $car == local {
      $state: set_var($state, $car, nth($cdr, 1), nth($cdr, 2))

    // Evaluate as a function
    } @else {
      $state:     list_eval($cdr, $state);
      $arguments: get_result($state);
      $globals:   get_globals($state);
      $locals:    get_locals($state);
      $is_global: map_has_key($globals, $car);
      $is_local:  map_has_key($locals, $car);

      // Call a lambda
      @if $is_global or $is_local {
        $lambda: map_get(if($is_global, $globals, $locals), $car);
        $state:  lambda_eval($lambda, $arguments, $state);

      // Call a native SASS function
      } @else {
        $state: set_result($state, call($car, $arguments...));
      }
    }
  }

  @return $state;
}

@function list_eval($list, $state) {
  $state: set_result($state, ());

  @each $item in $list {
    $globals: get_globals($state);
    $locals:  get_locals($state);

    // Evaluate a subexpression
    @if type_of($item) == list {
      $sub_state: eval($item, $state);
      $state:     merge_vars($state, $sub_state);
      $item:      get_result($sub_state);

    // Lookup a local variable
    } @else if map_has_key($locals, $item) {
      $item: map_get($locals, $item);

    // Lookup a global variable
    } @else if map_has_key($globals, $item) {
      $item: map_get($globals, $item);
    }

    $state: set_result($state, append(get_result($state), $item));
  }

  @return $state;
}

// Evaluate a set of conditionals
@function cond_eval($blocks, $state) {
  $state: set_result($state, null);

  @each $block in $blocks {
    $condition: car($block);
    $block:     cdr($block);

    // Always evaluate and the result of an else block
    @if $condition == else {
      @return eval($block, $state);

    // Evaluate block if the conditional is true
    } @else {
      $state: eval($condition, $state);
      @if get_result($state) { @return eval($block, $state); }
    }
  }

  @return set_result($state, null)
}

/////////////
// Lambdas //
/////////////

// Evaluate a lambda
@function lambda_eval($lambda_def, $arguments, $state) {
  $parameters: nth($lambda_def, 1);
  $body:       nth($lambda_def, 2);
  $locals:     nth($lambda_def, 3);

  // Populate the local variables with the parameter values
  @if length($parameters) != 0 {
    @for $index from 1 through length($parameters) {
      $locals: map_merge(
                 $locals,
                 ( nth($parameters, $index): nth($arguments, $index) )
               );
    }
  }

  $sub_state: eval($body, make_state(get_globals($state), $locals));
  $state:     merge_vars($state, make_state($globals: get_globals($sub_state)));

  @return set_result($state, get_result($sub_state));
}

// Construct a lambda and set the result of a state to that value
@function set_result_to_lambda($state, $def) {
  @return set_result($state, (car($def), cdr($def), get_locals($state)))
}

//////////////////////
// Evaluation State //
//////////////////////

// Construct a new state
@function make_state($globals: (), $locals: (), $result: null) {
  @return ($globals, $locals, $result);
}

// State Getters

@function get_globals($state) { @return nth($state, 1); }
@function get_locals($state)  { @return nth($state, 2); }
@function get_result($state)  { @return nth($state, 3); }

// State Setters

// Set the result in a given state
@function set_result($state, $result) {
  @return make_state(get_globals($state), get_locals($state), $result);
}

// Set a variable in a given state
@function set_var($state, $type, $name, $value) {
  @if type_of($value) == list {
    $state: eval($value, $state);
    $value: get_result($state);
  }

  $state: merge_vars($state, make_state(( "#{$type}s": ( $name: $value ))...));

  @return set_result($state, $name);
}

// Merge the variables from two states
@function merge_vars($to, $from) {
  @return make_state(
            map_merge(get_globals($to), get_globals($from)),
            map_merge(get_locals($to), get_locals($from)),
            get_result($to)
          );
}
