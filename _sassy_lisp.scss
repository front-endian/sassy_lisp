////////////////////
// List Functions //
////////////////////

@function car($list) {
  @return nth($list, 1);
}

@function cdr($list) {
  $output: ();
  $length: length($list);

  @if $length > 1 {
    @for $index from 2 through $length {
      $output: append($output, nth($list, $index));
    }
  }

  @return $output;
}

////////////////////
// Math Functions //
////////////////////

@function add($value, $rest...) {
  @each $number in $rest {
    $value: $value + $number;
  }

  @return $value;
}

@function subtract($value, $rest...) {
  @each $number in $rest {
    $value: $value - $number;
  }

  @return $value;
}

@function multiply($value, $rest...) {
  @each $number in $rest {
    $value: $value * $number;
  }

  @return $value;
}

@function divide($value, $rest...) {
  @each $number in $rest {
    $value: $value / $number;
  }

  @return $value;
}

///////////////////////
// Boolean Functions //
///////////////////////

@function bool_and($value, $rest...) {
  @each $item in $rest {
    $value: $value and $item;
  }

  @return $value;
}

@function bool_or($value, $rest...) {
  @each $item in $rest {
    $value: $value or $item;
  }

  @return $value;
}

@function bool_not($value) {
  @return not $value;
}

@function equal($value, $other) {
  @return $value == $other;
}

@function greater_than($value, $other) {
  @return $value > $other;
}

@function less_than($value, $other) {
  @return $value < $other;
}

@function less_than_or_equal($value, $other) {
  @return $value <= $other;
}

@function greater_than_or_equal($value, $other) {
  @return $value >= $other;
}

/////////////////
// Evalualtion //
/////////////////

@function function_eval($list...) {
  @return get_result(eval($list, make_state(null, (), ())));
}

@function eval($list, $state) {
  @if $list != () {
    $car: car($list);
    $cdr: cdr($list);

    // Evaluate each item in the list
    @if type_of($car) == list {
      $sub_state: list_eval($list, $state);
      $state:     merge_environments($state, $sub_state);
      $state:     set_result($state, nth(get_result($sub_state), -1));

    // Evaluate q built-in
    } @else if $car == q {
      $sub_state: list_eval($cdr, $state);
      $state:     merge_environments($state, $sub_state);
      $state:     set_result($state, get_result($sub_state));

    // Evaluate cond built-in
    } @else if $car == cond {
      $sub_state: cond_eval($cdr, $state);
      $state:     merge_environments($state, $sub_state);
      $state:     set_result($state, get_result($sub_state));

    // Define a global or a local
    } @else if $car == global or $car == local {
      $name:  nth($cdr, 1);
      $value: nth($cdr, 2);

      @if type_of($value) == list {
        $sub_state: eval($value, $state);
        $state:     merge_environments($state, $sub_state);
        $value:     get_result($sub_state);
      }

      $map: ( $name: $value );

      @if $car == global {
        $state: merge_globals($state, $map);
      } @else {
        $state: merge_locals($state, $map);
      }

      $state: set_result($state, $name);

    // Create a lambda
    } @else if $car == lambda {
      $state: set_result($state, make_lambda(car($cdr), cdr($cdr), get_locals($state)));

    // Evaluate as a function
    } @else {
      $sub_state: list_eval($cdr, $state);
      $state:     merge_environments($state, $sub_state);
      $globals:   get_globals($state);
      $locals:    get_locals($state);

      // Call lambda defined globally or locally
      @if map_has_key($globals, $car) or map_has_key($locals, $car) {
        $lambda:        map_get(
                          if(map_has_key($locals, $car), $locals, $globals),
                          $car
                        );
        $lambda_result: lambda_eval($lambda, get_globals($state), get_result($sub_state)...);
        $state:         merge_globals($state, get_globals($lambda_result));
        $state:         set_result($state, get_result($lambda_result));

      // Call a native SASS function
      } @else {
        $state: set_result($state, call($car, get_result($sub_state)...));
      }
    }
  }

  @return $state;
}

@function list_eval($list, $state) {
  $state: set_result($state, ());

  @each $item in $list {
    $globals: get_globals($state);
    $locals:  get_locals($state);

    @if type_of($item) == list {
      $sub_state: eval($item, $state);
      $state:     merge_environments($state, $sub_state);
      $item:      get_result($sub_state);

    } @else if map_has_key($locals, $item) {
      $item: map_get($locals, $item);

    } @else if map_has_key($globals, $item) {
      $item: map_get($globals, $item);
    }

    $state: set_result($state, append(get_result($state), $item));
  }

  @return $state;
}

@function cond_eval($blocks, $state) {
  $state: set_result($state, null);

  @each $block in $blocks {
    $car: car($block);
    $cdr: cdr($block);

    // If this is an else block, eval the cdr and return the result
    @if $car == else {
      @return eval($cdr, $state);

    // This is a conditional block, so eval the car
    } @else {
      $sub_state: eval($car, $state);
      $state:     merge_environments($sub_state, $state);

      // If the car returned true, eval the cdr and return the result
      @if get_result($sub_state) {
        @return eval($cdr, $state);
      }
    }
  }
}

/////////////
// Lambdas //
/////////////

@function lambda_eval($lambda, $globals, $arguments...) {
  $parameters: get_lambda_parameters($lambda);
  $body:       get_lambda_body($lambda);
  $locals:     get_lambda_locals($lambda);

  @if length($parameters) != 0 {
    @for $index from 1 through length($parameters) {
      $locals: map_merge(
                 $locals,
                 ( nth($parameters, $index): nth($arguments, $index) )
               );
    }
  }

  @return eval($body, make_state(null, $globals, $locals));
}

@function make_lambda($parameters, $body, $locals) {
  @return ($parameters, $body, $locals)
}

@function get_lambda_parameters($lambda) { @return nth($lambda, 1); }
@function get_lambda_body($lambda)       { @return nth($lambda, 2); }
@function get_lambda_locals($lambda)     { @return nth($lambda, 3); }

//////////////////////
// Evaluation State //
//////////////////////

@function make_state($result, $globals, $locals) {
  @return ($result, $globals, $locals);
}

// State Getters

@function get_result($state)  { @return nth($state, 1); }
@function get_globals($state) { @return nth($state, 2); }
@function get_locals($state)  { @return nth($state, 3); }

// State Setters

@function set_result($state, $result) {
  @return make_state($result, get_globals($state), get_locals($state));
}

@function merge_environments($to, $from) {
  @return merge_locals(
            merge_globals($to, get_globals($from)),
            get_locals($from)
          );
}

@function merge_globals($to, $globals) {
  @return make_state(
            get_result($to),
            map_merge(get_globals($to), $globals),
            get_locals($to)
          );
}

@function merge_locals($to, $locals) {
  @return make_state(
            get_result($to),
            get_globals($to),
            map_merge(get_locals($to), $locals)
          );
}
